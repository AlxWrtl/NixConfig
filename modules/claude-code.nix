{ config, pkgs, lib, ... }:

let
  # ============================================================================
  # CLAUDE CODE COMPLETE CONFIGURATION
  # ============================================================================
  # Approche d√©clarative compl√®te bas√©e sur les meilleures pratiques 2025
  # Contourne la limitation des symlinks de Claude Code via activation scripts
  # Configuration reproductible pour clean installs

  # === Configuration JSON principale ===
  claudeConfigJson = {
    # Mod√®le par d√©faut 2025
    defaultModel = "claude-sonnet-4-20250514";

    # Outils autoris√©s optimis√©s
    allowedTools = [
      "bash" "edit" "read" "write" "glob" "grep"
      "task" "webfetch" "websearch" "multiedit" "notebookedit"
    ];

    # Param√®tres d'optimisation
    autoSave = true;
    skipPermissions = false;  # S√©curit√©

    # Interface utilisateur 2025
    ui = {
      theme = "dark";
      compactMode = false;
      showTokens = true;
      showCost = true;
      animations = true;
    };

    # Notifications syst√®me
    notifications = {
      enabled = true;
      channel = "terminal_bell";
      showProgress = true;
    };

    # Status line configuration
    statusline = {
      enabled = true;
      showModel = true;
      showTokens = true;
      showCost = true;
      showGitBranch = true;
      showTime = true;
      format = "simple";
    };

    # Hooks syst√®me
    hooks = {
      preEdit = [];
      postEdit = [];
    };

    # Performance 2025
    performance = {
      parallelTools = true;
      cacheEnabled = true;
      compactHistory = true;
    };
  };

  # === Settings JSON pour Claude Code ===
  settingsJson = {
    statusLine = {
      type = "command";
      command = "pnpm dlx ccstatusline@latest";
      padding = 0;
    };
    env = {
      npm_config_prefer_pnpm = "true";
      npm_config_user_agent = "pnpm";
      BASH_DEFAULT_TIMEOUT_MS = "300000";
      BASH_MAX_TIMEOUT_MS = "600000";
    };
  };


  # === Commandes personnalis√©es TDD ===
  tddCommand = ''
    ---
    allowed-tools: ["bash", "edit", "read", "write", "grep", "glob", "multiedit"]
    description: "Test-Driven Development workflow avec tests automatis√©s"
    argument-hint: "<feature-description>"
    ---

    # Test-Driven Development Command

    D√©veloppement guid√© par les tests pour: $ARGUMENTS

    ## Processus TDD 2025
    1. üîç **Analyse**: Comprendre les exigences et patterns de test existants
    2. ‚ùå **Red**: √âcrire le test qui √©choue d'abord
    3. ‚úÖ **Green**: Code minimal pour faire passer le test
    4. üîÑ **Refactor**: Am√©liorer en gardant les tests verts
    5. üß™ **Validation**: Lancer la suite compl√®te de tests
    6. üìù **Documentation**: Mettre √† jour la doc si n√©cessaire

    Toujours lancer les tests apr√®s chaque √©tape et maintenir 100% de couverture.
  '';

  optimizeCommand = ''
    ---
    allowed-tools: ["bash", "edit", "read", "grep", "glob", "webfetch"]
    description: "Optimisation de performance avec pratiques 2025"
    argument-hint: "<optimization-target>"
    ---

    # Performance Optimization Command

    Optimiser: $ARGUMENTS

    ## Zones d'optimisation 2025
    - üöÄ **Bundle size**: Code splitting, tree shaking
    - ‚ö° **Runtime**: Optimisation algorithmique, mise en cache
    - üñºÔ∏è **Assets**: Optimisation d'images, lazy loading
    - üì° **Network**: CDN, compression, HTTP/3
    - üíæ **Memory**: Garbage collection, fuites m√©moire
    - üîÑ **Rendering**: Virtual DOM, Web Workers

    ## Processus
    1. Profiler les performances actuelles
    2. Identifier les goulots d'√©tranglement
    3. Appliquer des optimisations cibl√©es
    4. Mesurer les am√©liorations
    5. Documenter les changements
  '';

  contextPrimeCommand = ''
    # Context Prime Command

    Charger une compr√©hension compl√®te du projet:
    1. Lire CLAUDE.md et la documentation du projet
    2. Analyser la structure des r√©pertoires et fichiers cl√©s
    3. Comprendre la stack technologique et d√©pendances
    4. Examiner l'historique git et changements r√©cents
    5. Identifier les patterns de test et processus de build

    Fournit un contexte approfondi pour une assistance code inform√©e.
  '';

  # === Wrapper Claude Code ===
  claudeCodeWrapper = pkgs.writeShellScriptBin "claude-code" ''
    # Wrapper Claude Code avec validation et installation automatique
    CLAUDE_DIR="$HOME/.claude"
    CLI_PATH="$CLAUDE_DIR/local/node_modules/@anthropic-ai/claude-code/cli.js"

    # V√©rification et installation automatique si n√©cessaire
    if [ ! -f "$CLI_PATH" ]; then
        echo "üöÄ Installation de Claude Code CLI..."
        mkdir -p "$CLAUDE_DIR/local"
        cd "$CLAUDE_DIR/local"

        # Installation via pnpm (recommand√© 2025)
        if command -v ${pkgs.pnpm}/bin/pnpm >/dev/null 2>&1; then
            ${pkgs.pnpm}/bin/pnpm add @anthropic-ai/claude-code
        elif command -v npm >/dev/null 2>&1; then
            npm install @anthropic-ai/claude-code
        else
            echo "‚ùå npm ou pnpm requis pour installer Claude Code CLI" >&2
            exit 1
        fi

        if [ ! -f "$CLI_PATH" ]; then
            echo "‚ùå √âchec de l'installation de Claude Code CLI" >&2
            exit 1
        fi

        echo "‚úÖ Claude Code CLI install√© avec succ√®s"
    fi

    # Ex√©cution avec Node.js et tous les arguments
    exec ${pkgs.nodejs}/bin/node "$CLI_PATH" "$@"
  '';

in {
  # ============================================================================
  # ACTIVATION SCRIPTS - SOLUTION RECOMMAND√âE 2025
  # ============================================================================
  # Contourne la limitation des symlinks de Claude Code
  # Copie les fichiers dans ~/.claude lors de l'activation syst√®me

  system.activationScripts.claudeCodeSetup = {
    text = ''
      echo "ü§ñ Configuration Claude Code (approche d√©clarative)..."

      # R√©pertoire Claude
      CLAUDE_DIR="$HOME/.claude"

      # Cr√©ation de la structure compl√®te
      mkdir -p "$CLAUDE_DIR"/{hooks,commands,mcp,projects,local}

      # Configuration principale (settings.json)
      cat > "$CLAUDE_DIR/settings.json" << 'EOF'
${builtins.toJSON settingsJson}
EOF

      # Configuration Claude (.claude.json)
      cat > "$CLAUDE_DIR/.claude.json" << 'EOF'
${builtins.toJSON claudeConfigJson}
EOF


      # Commandes personnalis√©es
      cat > "$CLAUDE_DIR/commands/tdd.md" << 'EOF'
${tddCommand}
EOF

      cat > "$CLAUDE_DIR/commands/optimize.md" << 'EOF'
${optimizeCommand}
EOF

      cat > "$CLAUDE_DIR/commands/context-prime.md" << 'EOF'
${contextPrimeCommand}
EOF

      # Configuration MCP de base
      cat > "$CLAUDE_DIR/mcp/servers.json" << 'EOF'
{
  "mcpServers": {}
}
EOF

      # Permissions correctes
      chmod -R 755 "$CLAUDE_DIR"
      chmod 644 "$CLAUDE_DIR"/{settings.json,.claude.json}
      chmod 644 "$CLAUDE_DIR/commands"/*.md

      echo "‚úÖ Configuration Claude Code install√©e dans $CLAUDE_DIR"
    '';
  };

  # ============================================================================
  # PACKAGES ET ENVIRONNEMENT
  # ============================================================================

  environment.systemPackages = [
    claudeCodeWrapper
  ];

  environment.variables = {
    # Claude Code 2025
    CLAUDE_MODEL = "claude-sonnet-4-20250514";
    CLAUDE_MAX_TOKENS = "8192";
    CLAUDE_CONFIG_DIR = "$HOME/.claude";
    CLAUDE_NOTIFY_CHANNEL = "terminal_bell";
    CLAUDE_ENABLE_MCP = "true";
    CLAUDE_SESSION_AUTOSAVE = "true";
    CLAUDE_HOOKS_ENABLED = "true";
    CLAUDE_PARALLEL_TOOLS = "true";
    CLAUDE_CACHE_ENABLED = "true";
    CLAUDE_PLAN_MODE_DEFAULT = "false";

    # Package managers
    npm_config_prefer_pnpm = "true";
    npm_config_user_agent = "pnpm";
  };

  # ============================================================================
  # ALIASES OPTIMIS√âS 2025
  # ============================================================================

  environment.shellAliases = {
    # Raccourcis essentiels
    cc = "claude-code";
    claude = "claude-code";

    # Op√©rations de base
    cc-init = "claude-code /init";
    cc-help = "claude-code --help";
    cc-doctor = "claude-code doctor";
    cc-version = "claude-code --version";

    # Workflows avanc√©s
    cc-resume = "claude-code --resume";
    cc-continue = "claude-code --continue";
    cc-plan = "claude-code --plan-mode";

    # S√©lection de mod√®les
    cc-opus = "claude-code --model claude-opus-4";
    cc-sonnet = "claude-code --model claude-sonnet-4";
    cc-haiku = "claude-code --model claude-haiku";

    # Commandes sp√©cialis√©es 2025
    cc-tdd = "claude-code /tdd";
    cc-optimize = "claude-code /optimize";
    cc-context = "claude-code /context-prime";
    cc-safe = "claude-code --plan-mode --read-only";

    # Gestion des sessions
    cc-clear = "claude-code /clear";
    cc-compact = "claude-code /compact";
  };
}